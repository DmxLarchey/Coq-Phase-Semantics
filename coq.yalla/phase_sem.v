(**************************************************************)
(*   Copyright Dominique Larchey-Wendling [*]                 *)
(*                                                            *)
(*                             [*] Affiliation LORIA -- CNRS  *)
(**************************************************************)
(*      This file is distributed under the terms of the       *)
(*         CeCILL v2 FREE SOFTWARE LICENSE AGREEMENT          *)
(**************************************************************)


Require Import List_Type Permutation_Type genperm_Type.

Require Export closure_operators.

Require Import ill_def.

Notation " x '~[' b ']' y " := (PEperm_Type b x y) (at level 70, format "x  ~[ b ]  y").

Notation "‚üô" := (itop).
Notation "0" := (izero).
Notation ùùê := (ione).
Infix "&" := (iwith) (at level 50, only parsing).
Infix "Ôπ†" := (iwith) (at level 50).
Infix "‚äó" := (itens) (at level 50).
Infix "‚äï" := (iplus) (at level 50).
Infix "-o" := (ilmap) (at level 51, right associativity).
Notation "x o- y" := (ilpam y x) (at level 53, left associativity).
Notation "! x" := (ioc x) (at level 53).
Definition ill_lbang := map ioc.
Notation "‚Äº x" := (ill_lbang x) (at level 53).
Notation "¬£" := ivar.
Notation "‚àÖ" := nil (only parsing).




Set Implicit Arguments.

Section Phase_Spaces.

  Infix "‚äÜ" := subset (at level 75, no associativity).
  Infix "‚âÉ" := eqset (at level 75, no associativity).
  Notation "A ‚à© B" := (fun z => A z * B z : Type)%type (at level 50, format "A  ‚à©  B", left associativity).
  Notation "A ‚à™ B" := (fun z => A z + B z : Type)%type (at level 50, format "A  ‚à™  B", left associativity).
  Notation sg := (@eq _).

  Class PhaseSpace (b : bool) := {
    Web : Type;
    PScompose : Web -> Web -> Web;
    PSunit : Web;
    PSCL : @ClosureOp _ (@subset Web);
    PSExp : Web -> Type;
    PScl_stable_l : @cl_stability_l _ _ PSCL (composes PScompose);
    PScl_stable_r : @cl_stability_r _ _ PSCL (composes PScompose);
    PScl_associative_l : @cl_associativity_l _ _ PSCL (composes PScompose);
    PScl_associative_r : @cl_associativity_r _ _ PSCL (composes PScompose);
    PScl_neutral_l_1 : @cl_neutrality_l_1 _ _ PSCL (composes PScompose) (sg PSunit);
    PScl_neutral_l_2 : @cl_neutrality_l_2 _ _ PSCL (composes PScompose) (sg PSunit);
    PScl_neutral_r_1 : @cl_neutrality_r_1 _ _ PSCL (composes PScompose) (sg PSunit);
    PScl_neutral_r_2 : @cl_neutrality_r_2 _ _ PSCL (composes PScompose) (sg PSunit);
    PSsub_monoid_1 : @sub_monoid_hyp_1 _ PSCL PSunit PSExp;
    PSsub_monoid_2 : sub_monoid_hyp_2 PScompose PSExp;
    PSsub_J : @sub_J_hyp _ PScompose PSCL PSunit PSExp;
    PScl_commute : b = true -> @cl_commutativity _ _ PSCL (composes PScompose)
  }.

  (* Interpretation of Linear Logic *)

  Infix "‚àò" := (composes PScompose) (at level 50, no associativity).
  Infix "‚ä∏" := (magicwand_l PScompose) (at level 51, right associativity).
  Infix "‚üú" := (magicwand_r PScompose) (at level 52, left associativity).
  Infix "‚äõ" := (tensor (composes PScompose)) (at level 59).
  Infix "‚äì" := glb (at level 50, no associativity).
  Infix "‚äî" := lub (at level 50, no associativity).
  Notation "‚ùó A" := (bang PSExp A) (at level 40, no associativity).

  Section Formula_Interpretation.

    Reserved Notation "'‚ü¶' A '‚üß'" (at level 49).
    Variable perm_bool : bool.
    Variable PS : PhaseSpace perm_bool.
    Variable v : IAtom -> Web -> Type.
    Instance CL0 : ClosureOp := PSCL.

    Fixpoint form_presem f :=
      match f with
      | 0     => zero
      | ‚üô             => top
      | ùùê              => @one _ _ CL0 (sg PSunit)
      | ¬£ x    => v x
      | a -o b => ‚ü¶a‚üß ‚ä∏ cl(‚ü¶b‚üß)
      | ineg a => ‚ü¶a‚üß ‚ä∏ cl(v atN)
      | b o- a => cl(‚ü¶b‚üß) ‚üú ‚ü¶a‚üß
      | igen a => cl(v atN) ‚üú ‚ü¶a‚üß
      | a ‚äó b  => ‚ü¶a‚üß ‚äõ ‚ü¶b‚üß
      | a ‚äï b  => ‚ü¶a‚üß ‚äî ‚ü¶b‚üß
      | a & b  => cl(‚ü¶a‚üß) ‚äì cl(‚ü¶b‚üß)
      | !a     => ‚ùó(cl(‚ü¶a‚üß))
      end
    where "‚ü¶ a ‚üß" := (form_presem a).

    Definition list_form_presem l := fold_right (composes PScompose) (sg PSunit) (map form_presem l).
    Notation "‚ü¨ﬂ≠  l ‚ü≠" := (list_form_presem l) (at level 49).

    Fact list_form_presem_nil : ‚ü¨ﬂ≠nil‚ü≠ = (sg PSunit).
    Proof. auto. Qed.

    Fact list_form_presem_cons f l : ‚ü¨ﬂ≠f::l‚ü≠  = ‚ü¶f‚üß ‚àò ‚ü¨ﬂ≠l‚ü≠.
    Proof. auto. Qed.

  End Formula_Interpretation.

  Class PhaseModel (P : ipfrag) := {
    PMPS : PhaseSpace (ipperm P);
    PMval : IAtom -> Web -> Type;
    PMgax : forall a, list_form_presem PMPS PMval (fst (projT2 (ipgax P) a))
                    ‚äÜ @cl _ _ PSCL (form_presem PMPS PMval (snd (projT2 (ipgax P) a)))
  }.

  Context { P : ipfrag }.
  Variable PM : PhaseModel P.
  Instance PS : PhaseSpace (ipperm P) := PMPS.
  Instance CL : ClosureOp := PSCL.

  Hint Resolve (@cl_idempotent _ _ CL).
  Hint Resolve (@PScl_stable_l _ PS) (@PScl_stable_r _ PS)
               (@PScl_associative_l _ PS) (@PScl_associative_r _ PS)
               (@PScl_neutral_l_1 _ PS) (@PScl_neutral_l_2 _ PS)
               (@PScl_neutral_r_1 _ PS) (@PScl_neutral_r_2 _ PS)
               (@PSsub_monoid_1 _ PS) (@PSsub_monoid_2 _ PS) (@PSsub_J _ PS).
  Hint Resolve (@composes_monotone _ PScompose).
  Hint Resolve (@subset_preorder Web).
  Hint Resolve  magicwand_l_adj_l magicwand_l_adj_r magicwand_r_adj_l magicwand_r_adj_r.
(*
               cl_associative_l composes_associative_2 composes_commute_1
               composes_neutral_l_1 composes_neutral_l_2 composes_neutral_r_1 composes_neutral_r_2.
*)


  Infix "‚àò" := (composes PScompose) (at level 50, no associativity).

  Notation closed := (fun x => cl x ‚äÜ x).
  Notation v := PMval.
  Notation PMform_presem := (form_presem PMPS PMval).
  Notation PMlist_form_presem := (list_form_presem PMPS PMval).
  Notation "‚ü¶ A ‚üß" := (PMform_presem A) (at level 49).
  Notation "‚ü¨ﬂ≠  l ‚ü≠" := (PMlist_form_presem l) (at level 49).

  Fact list_form_presem_app_1 l m : cl (‚ü¨ﬂ≠  l ++ m ‚ü≠) ‚äÜ cl (‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠).
  Proof.
  induction l as [ | f l IHl ]; simpl app; auto.
  - etransitivity; [ apply PScl_neutral_l_1 | ]; auto.
    apply cl_le; auto.
  - rewrite 2 list_form_presem_cons.
    etransitivity; [ | eapply cl_le; try apply PScl_associative_l ]; auto.
    transitivity (cl (‚ü¶ f ‚üß ‚àò cl (‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠))).
    + apply cl_le; auto; etransitivity; [ | apply cl_increase ].
      apply composes_monotone; try reflexivity.
      apply le_cl; auto; assumption.
    + apply cl_le; auto.
  Qed.

  Fact list_form_presem_app_closed_1 l m X : closed X -> ‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠ ‚äÜ X -> ‚ü¨ﬂ≠  l ++ m ‚ü≠ ‚äÜ X.
  Proof.
  intros HF Hc.
  etransitivity; [ | apply HF].
  apply le_cl; auto.
  etransitivity; [ apply list_form_presem_app_1 | ].
  apply cl_le; auto.
  etransitivity; [ eassumption | apply cl_increase ].
  Qed.

  Fact list_form_presem_app_2 l m : cl (‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠) ‚äÜ cl (‚ü¨ﬂ≠  l ++ m ‚ü≠).
  Proof.
  induction l as [ | f l IHl ]; simpl app; auto.
  - apply cl_le; try apply neutral_l_2_g; auto.
  - rewrite 2 list_form_presem_cons.
    etransitivity; [ eapply cl_le; try apply PScl_associative_r | ]; auto.
    transitivity (cl (‚ü¶ f ‚üß ‚àò cl (‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠))).
    + apply cl_le; auto; etransitivity; [ | apply cl_increase ].
      apply composes_monotone; try reflexivity.
      apply cl_increase.
    + apply cl_le; auto.
      etransitivity; [ | apply PScl_stable_r ]; auto.
      apply composes_monotone; try reflexivity; assumption.
  Qed.

  Fact list_form_presem_app_closed_2 l m X : closed X -> ‚ü¨ﬂ≠  l ++ m ‚ü≠ ‚äÜ X -> ‚ü¨ﬂ≠  l ‚ü≠ ‚àò ‚ü¨ﬂ≠  m ‚ü≠ ‚äÜ X.
  Proof.
  intros HF Hc.
  etransitivity; [ | apply HF].
  apply le_cl; auto.
  etransitivity; [ apply list_form_presem_app_2 | ].
  apply cl_le; auto.
  etransitivity; [ eassumption | apply cl_increase ].
  Qed.

  Fact list_form_presem_app_app_closed_1 l m n X : closed X -> ‚ü¨ﬂ≠  l ‚ü≠ ‚àò (‚ü¨ﬂ≠  m ‚ü≠ ‚àò ‚ü¨ﬂ≠  n ‚ü≠) ‚äÜ X -> ‚ü¨ﬂ≠  l ++ m ++ n ‚ü≠ ‚äÜ X.
  Proof.
  intros HF Hc.
  apply list_form_presem_app_closed_1; auto.
  transitivity (‚ü¨ﬂ≠ l ‚ü≠ ‚àò cl (‚ü¨ﬂ≠ m ‚ü≠ ‚àò ‚ü¨ﬂ≠  n ‚ü≠)).
  - apply composes_monotone; try reflexivity.
    apply le_cl; auto; apply list_form_presem_app_1.
  - eapply cl_closed in Hc; auto; [ | apply HF ].
    etransitivity; [ | apply Hc ].
    etransitivity; [ | apply PScl_stable_r ].
    apply composes_monotone; try reflexivity.
  Qed.

  Fact list_form_presem_app_app_closed_2 l m n X : closed X -> ‚ü¨ﬂ≠  l ++ m ++ n ‚ü≠ ‚äÜ X -> ‚ü¨ﬂ≠  l ‚ü≠ ‚àò (‚ü¨ﬂ≠  m ‚ü≠ ‚àò ‚ü¨ﬂ≠  n ‚ü≠) ‚äÜ X.
  Proof.
  intros HF Hc.
  transitivity (‚ü¨ﬂ≠ l ‚ü≠ ‚àò cl (‚ü¨ﬂ≠ m ++ n ‚ü≠)).
  - apply composes_monotone; try reflexivity.
    apply le_cl; auto; apply list_form_presem_app_2.
  - etransitivity; [ apply PScl_stable_r | ].
    apply cl_closed; auto.
    apply list_form_presem_app_closed_2; auto.
  Qed.

  Fact list_form_presem_mono_app_closed l m1 m2 n X : closed X -> ‚ü¨ﬂ≠m1‚ü≠ ‚äÜ ‚ü¨ﬂ≠m2‚ü≠  ->
     ‚ü¨ﬂ≠l ++ m2 ++ n‚ü≠ ‚äÜ X -> ‚ü¨ﬂ≠l ++ m1 ++ n‚ü≠ ‚äÜ X.
  Proof.
  intros Hc Hi H.
  apply list_form_presem_app_app_closed_1; auto.
  apply list_form_presem_app_app_closed_2 in H; auto.
  etransitivity; [ | apply H ].
  apply composes_monotone; try reflexivity.
  apply composes_monotone; try reflexivity; auto.
  Qed.

  Fact list_form_presem_mono_cons_closed l a b m X : closed X -> ‚ü¶a‚üß ‚äÜ cl(‚ü¶b‚üß) ->
     ‚ü¨ﬂ≠l ++ b :: m‚ü≠ ‚äÜ X -> ‚ü¨ﬂ≠l ++ a :: m‚ü≠ ‚äÜ X.
  Proof.
  intros Hc Hi H.
  apply list_form_presem_app_closed_1; auto.
  rewrite list_form_presem_cons.
  apply list_form_presem_app_closed_2 in H; auto.
  rewrite list_form_presem_cons in H.
  transitivity (‚ü¨ﬂ≠ l ‚ü≠ ‚àò (cl(‚ü¶ b ‚üß) ‚àò ‚ü¨ﬂ≠ m ‚ü≠)).
  - apply composes_monotone; try reflexivity.
    apply composes_monotone; try reflexivity; auto.
  - transitivity (‚ü¨ﬂ≠ l ‚ü≠ ‚àò cl (‚ü¶ b ‚üß ‚àò ‚ü¨ﬂ≠ m ‚ü≠)).
    + apply composes_monotone; try reflexivity.
      apply PScl_stable_l.
    + etransitivity; [ apply PScl_stable_r | ].
      apply cl_closed; auto.
  Qed.

  Fact list_form_presem_bang_1 l : cl (‚ü¨ﬂ≠‚Äºl‚ü≠) ‚äÜ ‚ùó (lcap (map (fun x => cl (‚ü¶ x ‚üß)) l)).
  Proof.
  induction l.
  - simpl; rewrite list_form_presem_nil.
    apply store_unit_1; auto.
  - simpl; rewrite list_form_presem_cons.
    apply cl_le; auto.
    transitivity (‚ü¶ ! a ‚üß ‚àò cl (‚ùó lcap (map (fun x => cl (‚ü¶ x ‚üß)) l))).
    + apply composes_monotone; try reflexivity.
      etransitivity; [ | etransitivity; [apply IHl | ] ]; auto; apply cl_increase.
    + etransitivity; [ apply PScl_stable_r | ]; simpl.
      etransitivity; [ refine (fst (@store_comp _ PScompose _ _ _ PSunit _ _ _ _ _ _ _ _ _)) | ]; auto.
      * apply mglb_closed.
        clear IHl; induction l; simpl; auto.
      * reflexivity.
  Qed.

(*
  Fact list_form_presem_bang_2 l : ‚ùó (lcap (map PMform_presem l)) ‚äÜ cl (‚ü¨ﬂ≠‚Äºl‚ü≠).
  Proof.
  induction l.
  - simpl; rewrite list_form_presem_nil.
    eapply store_unit_2; eauto.
  - simpl; rewrite list_form_presem_cons.
    transitivity (cl (‚ü¶ ! a ‚üß ‚àò ‚ùó lcap (map PMform_presem l))).
    + simpl.
      etransitivity; [ | refine (@store_comp_2 _ PScompose _ PSunit _ _ _ _) ]; auto.
      clear IHl; induction l; simpl; auto.
      * apply store_monotone.
        intros x [Ha Ht]; split; auto.
        apply (@cl_increase _ _ CL); auto.
      * apply store_monotone.
        intros x [Ha Ht]; split; auto.
        apply (@cl_increase _ _ CL); auto.
    + apply cl_le; auto.
      etransitivity; [ | apply PScl_stable_r ].
      apply composes_monotone; try reflexivity; auto.
  Qed.
*)

  Fact list_form_presem_bang_2 l : ‚ùó (lcap (map (fun x => cl (‚ü¶ x ‚üß)) l)) ‚äÜ cl (‚ü¨ﬂ≠‚Äºl‚ü≠).
  Proof.
  induction l.
  - simpl; rewrite list_form_presem_nil.
    eapply store_unit_2; eauto.
  - simpl; rewrite list_form_presem_cons.
    transitivity (cl (‚ü¶ ! a ‚üß ‚àò ‚ùó lcap (map (fun x => cl (‚ü¶ x ‚üß)) l))).
    + simpl.
      etransitivity; [ | refine (@store_comp_2 _ PScompose _ PSunit _ _ _ _) ]; auto.
      clear IHl; induction l; simpl; auto;
        apply store_monotone;
        intros x [Ha Ht]; split; auto.
    + apply cl_le; auto.
      etransitivity; [ | apply PScl_stable_r ].
      apply composes_monotone; try reflexivity; auto.
  Qed.


  (* All the rules of the ILL sequent calculus (including cut) are closed
     under relational phase semantics, hence we deduce the following
     soundness theorem *)

  Section soundness.

    Notation "l '‚ä¢' x" := (ill P l x) (at level 70, no associativity).

    Fact ill_ax_sound a : ‚ü¨ﬂ≠a :: nil‚ü≠  ‚äÜ cl (‚ü¶a‚üß).
    Proof. apply PScl_neutral_r_2. Qed.

    Fact ill_cut_sound Œì œ¥ Œî a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œî ++ a :: œ¥‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œî ++ Œì ++ œ¥‚ü≠ ‚äÜ cl(‚ü¶b‚üß).
    Proof.
    intros H1 H2.
    apply list_form_presem_app_app_closed_1; auto.
    transitivity (‚ü¨ﬂ≠ Œî ‚ü≠ ‚àò (cl (‚ü¶ a ‚üß) ‚àò ‚ü¨ﬂ≠  œ¥ ‚ü≠)).
    - apply composes_monotone; try reflexivity.
      apply composes_monotone; try reflexivity; auto.
    - transitivity (cl (‚ü¨ﬂ≠ Œî ‚ü≠ ‚àò (‚ü¶ a ‚üß ‚àò ‚ü¨ﬂ≠ œ¥ ‚ü≠))).
      + etransitivity; [ | apply PScl_stable_r ].
        apply composes_monotone; try reflexivity.
        apply PScl_stable_l.
      + apply cl_le; auto.
        rewrite <- list_form_presem_cons.
        apply list_form_presem_app_closed_2; auto.
    Qed.

    Fact ill_nc_swap_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++!a::!b::Œî‚ü≠ ‚äÜ cl (‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì++!b::!a::Œî‚ü≠ ‚äÜ cl (‚ü¶c‚üß).
    Proof.
    intros H.
    change (!a::!b::Œî) with ((!a::!b::nil)++Œî) in H.
    change (!b::!a::Œî) with (map ioc (b::a::nil)++Œî).
    apply list_form_presem_app_app_closed_1; auto.
    apply list_form_presem_app_app_closed_2 in H; auto.
    transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (cl (‚ü¨ﬂ≠ !a :: !b :: nil ‚ü≠) ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)).
    - apply composes_monotone; try reflexivity.
      apply composes_monotone; try reflexivity.
      etransitivity; [ apply cl_increase | ].
      etransitivity; [ apply list_form_presem_bang_1 | ].
      transitivity (‚ùó lcap (map (fun x => cl (‚ü¶ x ‚üß)) (a :: b :: nil))).
      +  apply store_monotone.
         simpl; split; tauto.
      + etransitivity; [ apply list_form_presem_bang_2 | ]; reflexivity.
    - transitivity (cl (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (‚ü¨ﬂ≠ !a :: !b :: nil ‚ü≠ ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)));
        [ transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò cl (‚ü¨ﬂ≠ !a :: !b :: nil ‚ü≠ ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)) | ]; auto.
      + apply composes_monotone; try reflexivity; auto.
      + apply cl_closed; auto.
    Qed.

    Fact ill_co_oc_perm_sound l1 l2 lw lw' a : Permutation_Type lw lw' ->
             ‚ü¨ﬂ≠ l1 ++ map ioc lw ++ l2 ‚ü≠ ‚äÜ cl (‚ü¶ a ‚üß) -> ‚ü¨ﬂ≠ l1 ++ map ioc lw' ++ l2 ‚ü≠ ‚äÜ cl(‚ü¶ a ‚üß).
    Proof.
      intros HP; revert l1 l2; induction HP; intros l1 l2; auto.
      + replace (l1 ++ map ioc (x :: l) ++ l2) with ((l1 ++ ioc x :: nil) ++ map ioc l ++ l2)
          by (simpl; rewrite <- ? app_assoc; rewrite <- app_comm_cons; reflexivity).
        replace (l1 ++ map ioc (x :: l') ++ l2) with ((l1 ++ ioc x :: nil) ++ map ioc l' ++ l2)
          by (simpl; rewrite <- ? app_assoc; rewrite <- app_comm_cons; reflexivity).
        auto.
      + apply ill_nc_swap_sound.
    Qed.

    Fact ill_co_swap_sound (HPerm: ipperm P = true) Œì Œî a b c :
      ‚ü¨ﬂ≠Œì ++ a :: b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì ++ b :: a :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H.
    change (a::b::Œî) with ((a::b::nil)++Œî) in H.
    change (b::a::Œî) with ((b::a::nil)++Œî).
    apply list_form_presem_app_app_closed_1; auto.
    apply list_form_presem_app_app_closed_2 in H; auto.
    transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (cl (‚ü¨ﬂ≠ a :: b :: nil ‚ü≠) ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)).
    - apply composes_monotone; try reflexivity.
      apply composes_monotone; try reflexivity.
      transitivity (‚ü¶ b ‚üß ‚àò cl (‚ü¶ a ‚üß)); [ | transitivity (cl (‚ü¶ a ‚üß ‚àò ‚ü¶ b ‚üß))].
      + apply composes_monotone; try reflexivity.
        apply PScl_neutral_r_2.
      + etransitivity; [ apply PScl_stable_r | ].
        apply cl_le; auto.
        apply PScl_commute; auto.
      + apply cl_le; auto.
        etransitivity; [ | apply PScl_stable_r ].
        apply composes_monotone; try reflexivity; auto.
    - transitivity (cl (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (‚ü¨ﬂ≠ a :: b :: nil ‚ü≠ ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)));
        [ transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò cl (‚ü¨ﬂ≠ a :: b :: nil ‚ü≠ ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)) | ]; auto.
      + apply composes_monotone; try reflexivity; auto.
      + apply cl_closed; auto.
    Qed.

    Fact ill_perm_sound Œì Œî a : Œì ~[ipperm P] Œî -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œî‚ü≠ ‚äÜ cl(‚ü¶a‚üß).
    Proof.
    assert ({ipperm P = true} + {ipperm P = false}) as Hbool
      by (clear; destruct (ipperm P); [ left | right ]; reflexivity).
    destruct Hbool as [Hbool | Hbool]; intros.
    - rewrite Hbool in X.
      revert X a X0.
      induction 1 as [ | a Ga De H1 IH1 | | ] ; intros c; auto.
      + rewrite ? list_form_presem_cons.
        intros H; apply magicwand_l_adj_r; auto.
        etransitivity; [ | apply (@cl_magicwand_l_1 _ _ _ _ (composes PScompose)) ]; auto.
        apply IH1 with (a := a -o c); simpl.
        etransitivity; [ | apply cl_increase ]; auto.
      + apply ill_co_swap_sound with (Œì := nil) ; assumption.
    - rewrite Hbool in X; simpl in X; subst; assumption.
    Qed.

(* TODO simplify ? *)
    Fact ill_unit_l_sound Œì Œî a : ‚ü¨ﬂ≠Œì ++ Œî‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œì ++ ùùê :: Œî‚ü≠ ‚äÜ cl(‚ü¶a‚üß).
    Proof.
    intros H.
    apply list_form_presem_app_closed_1; auto.
    rewrite list_form_presem_cons; simpl; unfold one.
    transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (cl (sg PSunit ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠))).
    - apply composes_monotone; try reflexivity; auto.
    - etransitivity; [ apply PScl_stable_r | ].
      apply cl_closed; auto.
      transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò cl (‚ü¨ﬂ≠ Œî ‚ü≠)).
      + apply composes_monotone; try reflexivity.
        apply PScl_neutral_l_2.
      + etransitivity; [ apply PScl_stable_r | ].
        apply cl_closed; auto.
        apply list_form_presem_app_closed_2; auto.
    Qed.

    Fact ill_unit_r_sound : ‚ü¨ﬂ≠nil‚ü≠ ‚äÜ cl(‚ü¶ùùê‚üß).
    Proof. etransitivity; apply cl_increase. Qed.

    Fact ill_limp_l_sound Œì œ¥ Œî a b c : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠œ¥ ++ b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠œ¥ ++ Œì ++ a -o b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H1 H2.
    apply list_form_presem_app_app_closed_1; auto.
    rewrite list_form_presem_cons.
    transitivity (‚ü¨ﬂ≠ œ¥ ‚ü≠ ‚àò cl((‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò (‚ü¶ a ‚üß ‚ä∏ cl(‚ü¶ b ‚üß))) ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠)).
    - apply composes_monotone; try reflexivity.
      apply PScl_associative_l.
    - apply list_form_presem_app_closed_2 in H2; auto.
      eapply cl_closed in H2; auto.
      etransitivity; [ | apply H2 ].
      etransitivity; [ | apply PScl_stable_r ].
      apply composes_monotone; try reflexivity.
      rewrite list_form_presem_cons.
      apply cl_le; auto.
      etransitivity; [ | apply PScl_stable_l ].
      apply composes_monotone; try reflexivity.
      apply magicwand_l_adj_r; auto; try reflexivity.
      etransitivity; [ apply (@cl_magicwand_l_3 _ _ _ _ (composes PScompose)) | ]; auto.
      apply (@magicwand_l_monotone _ _ _ (composes PScompose)); auto; reflexivity.
    Qed.

    Fact ill_neg_l_sound Œì a : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œì ++ ineg a :: nil‚ü≠ ‚äÜ cl(‚ü¶N‚üß).
    Proof.
    intros H.
    replace (‚ü¨ﬂ≠ Œì ++ ineg a :: nil ‚ü≠) with (‚ü¨ﬂ≠ nil ++ Œì ++ a -o N :: nil‚ü≠)
      by (unfold list_form_presem; rewrite ? map_app; simpl; reflexivity).
    apply ill_limp_l_sound; auto.
    apply PScl_neutral_r_2.
    Qed.

    Fact ill_rimp_l_sound Œì œ¥ Œî a b c : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠œ¥ ++ b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠œ¥ ++ b o- a :: Œì ++ Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H1 H2.
    rewrite app_comm_cons.
    apply list_form_presem_app_app_closed_1; auto.
    rewrite list_form_presem_cons; simpl.
    apply list_form_presem_app_closed_2 in H2; auto.
    eapply cl_closed in H2; auto.
    etransitivity; [ | apply H2 ].
    etransitivity; [ | apply PScl_stable_r ].
    apply composes_monotone; try reflexivity.
    rewrite list_form_presem_cons.
    etransitivity; [ | apply PScl_stable_l ].
    apply composes_monotone; try reflexivity.
    apply magicwand_r_adj_r; auto; try reflexivity.
    etransitivity; [ apply (@cl_magicwand_r_3 _ _ _ _ (composes PScompose)) | ]; auto.
    apply (@magicwand_r_monotone _ _ _ (composes PScompose)); auto ;reflexivity.
    Qed.

    Fact ill_gen_l_sound Œì a :  ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠igen a :: Œì‚ü≠ ‚äÜ cl(‚ü¶N‚üß).
    Proof.
    intros H.
    replace (‚ü¨ﬂ≠ igen a :: Œì ‚ü≠) with (‚ü¨ﬂ≠ nil ++ N o- a :: Œì ++ nil‚ü≠)
      by (unfold list_form_presem; simpl; rewrite app_nil_r; reflexivity).
    apply ill_rimp_l_sound; auto.
    apply PScl_neutral_r_2.
    Qed.

    Fact ill_limp_r_sound Œì a b : ‚ü¨ﬂ≠a :: Œì‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß ‚ä∏ cl(‚ü¶b‚üß)).
    Proof. intro; etransitivity; [ apply magicwand_l_adj_l | apply cl_increase ]; auto. Qed.

    Fact ill_neg_r_sound Œì a : ‚ü¨ﬂ≠a :: Œì‚ü≠ ‚äÜ cl(‚ü¶N‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶ineg a‚üß).
    Proof. simpl; change (v atN) with (‚ü¶ivar atN‚üß); apply ill_limp_r_sound; auto. Qed.

    Fact ill_rimp_r_sound Œì a b : ‚ü¨ﬂ≠Œì ++ a :: nil‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(cl(‚ü¶b‚üß) ‚üú ‚ü¶a‚üß).
    Proof.
    intros H.
    etransitivity; [ | apply cl_increase ].
    apply magicwand_r_adj_l; auto.
    apply list_form_presem_app_closed_2 in H; auto.
    eapply cl_closed in H; auto.
    etransitivity; [ | apply H ].
    etransitivity; [ | apply PScl_stable_r ].
    apply composes_monotone; try reflexivity.
    apply PScl_neutral_r_1.
    Qed.

    Fact ill_gen_r_sound Œì a : ‚ü¨ﬂ≠Œì ++ a :: nil‚ü≠ ‚äÜ cl(‚ü¶N‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶igen a‚üß).
    Proof. simpl; change (v atN) with (‚ü¶ivar atN‚üß); apply ill_rimp_r_sound; auto. Qed.

    Fact ill_with_l1_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì ++ a :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì ++ a Ôπ† b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H.
    apply list_form_presem_mono_cons_closed with a; auto.
    simpl; red; unfold glb; tauto.
    Qed.

    Fact ill_with_l2_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì ++ b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì ++ a Ôπ† b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H.
    apply list_form_presem_mono_cons_closed with b; auto.
    simpl; red; unfold glb; tauto.
    Qed.

    Fact ill_with_r_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶aÔπ†b‚üß).
    Proof. intros H1 H2; (etransitivity; [ | apply cl_increase ]); split; auto. Qed.

    Fact ill_bang_l_sound Œì Œî a b : ‚ü¨ﬂ≠Œì++a::Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì++!a::Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß).
    Proof.
    intros H.
    apply list_form_presem_mono_cons_closed with a; auto.
    apply store_dec; auto.
    Qed.

    Fact ill_bang_r_sound Œì a : ‚ü¨ﬂ≠‚ÄºŒì‚ü≠ ‚äÜ cl(‚ü¶ a ‚üß) -> ‚ü¨ﬂ≠‚ÄºŒì‚ü≠ ‚äÜ cl(‚ùócl(‚ü¶a‚üß)).
    Proof.
    intros H.
    apply le_cl; auto.
    etransitivity; [ apply list_form_presem_bang_1 | ].
    etransitivity; [ | apply cl_increase ].
    apply store_der; auto.
    etransitivity; [ apply list_form_presem_bang_2 | ].
    apply cl_closed; auto.
    Qed.

    Fact ill_weak_sound Œì Œî a b : ‚ü¨ﬂ≠Œì ++ Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì ++ !a :: Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß).
    Proof.
    intros H.
    apply list_form_presem_mono_cons_closed with ione; auto.
    - etransitivity; [ | apply cl_increase ].
      apply (@store_inc_unit _ PScompose); auto.
    - apply ill_unit_l_sound; assumption.
    Qed.

    Fact ill_cntr_sound Œì Œî a b : ‚ü¨ﬂ≠Œì ++ !a :: !a :: Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì ++ !a :: Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß).
    Proof.
    intros H.
    change (!a::!a::Œî) with ((!a::!a::nil)++Œî) in H.
    apply list_form_presem_mono_cons_closed with ((!a) ‚äó (!a)); auto.
    - etransitivity; [ | apply cl_increase ].
      eapply store_compose_idem; eauto.
    - apply list_form_presem_app_closed_1; auto.
      rewrite list_form_presem_cons; simpl.
      simpl in H.
      apply list_form_presem_app_closed_2 in H; auto.
      rewrite 2 list_form_presem_cons in H.
      transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò cl (‚ü¶ ! a ‚üß ‚àò (‚ü¶ ! a ‚üß ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠))).
      + apply composes_monotone; try reflexivity.
        etransitivity; [ apply PScl_stable_l | ].
        apply cl_le; auto.
      + etransitivity; [ apply PScl_stable_r | ].
        apply cl_closed; auto.
    Qed.

    Fact ill_tensor_l_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì ++ a :: b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì ++ a ‚äó b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H.
    change (a::b::Œî) with ((a::b::nil)++Œî) in H.
    - apply list_form_presem_app_closed_1; auto.
      rewrite list_form_presem_cons; simpl.
      simpl in H.
      apply list_form_presem_app_closed_2 in H; auto.
      rewrite 2 list_form_presem_cons in H.
      transitivity (‚ü¨ﬂ≠ Œì ‚ü≠ ‚àò cl (‚ü¶ a ‚üß ‚àò (‚ü¶ b ‚üß ‚àò ‚ü¨ﬂ≠ Œî ‚ü≠))).
      + apply composes_monotone; try reflexivity.
        etransitivity; [ apply PScl_stable_l | ].
        apply cl_le; auto.
      + etransitivity; [ apply PScl_stable_r | ].
        apply cl_closed; auto.
    Qed.

    Fact ill_tensor_r_sound Œì Œî a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œî‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì ++ Œî‚ü≠ ‚äÜ cl(‚ü¶a‚üß ‚äõ ‚ü¶b‚üß).
    Proof.
    intros H1 H2.
    apply list_form_presem_app_closed_1; [ apply tensor_closed | ].
    etransitivity; [ eapply composes_monotone; eassumption | ].
    etransitivity; [ apply cl_stable | ]; auto.
    apply cl_increase.
    Qed.

    Fact ill_plus_l_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì ++ a :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) -> ‚ü¨ﬂ≠Œì ++ b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß) ->
       ‚ü¨ﬂ≠Œì ++ a ‚äï b :: Œî‚ü≠ ‚äÜ cl(‚ü¶c‚üß).
    Proof.
    intros H1 H2.
    apply list_form_presem_app_closed_2 in H1; auto.
    rewrite list_form_presem_cons in H1.
    apply list_form_presem_app_closed_2 in H2; auto.
    rewrite list_form_presem_cons in H2.
    transitivity ((‚ü¨ﬂ≠Œì‚ü≠ ‚äõ(‚ü¶a‚üß‚äõ‚ü¨ﬂ≠Œî‚ü≠)) ‚äî (‚ü¨ﬂ≠Œì‚ü≠ ‚äõ(‚ü¶b‚üß‚äõ‚ü¨ﬂ≠Œî‚ü≠))).
    - apply list_form_presem_app_closed_1; [ apply lub_closed | ].
      rewrite list_form_presem_cons.
      eapply subset_trans; [ | apply tensor_lub_distrib_r ]; auto.
      etransitivity; [ | apply cl_increase ].
      apply composes_monotone; try reflexivity.
      etransitivity; [ | apply tensor_lub_distrib_l]; auto.
      etransitivity; [ | apply cl_increase ].
      apply composes_monotone; try reflexivity.
    - apply lub_out; auto.
      + eapply cl_closed in H1; auto.
        etransitivity; [ | apply H1 ].
        apply cl_le; auto.
        etransitivity; [ | apply PScl_stable_r ]; reflexivity.
      + eapply cl_closed in H2; auto.
        etransitivity; [ | apply H2 ].
        apply cl_le; auto.
        etransitivity; [ | apply PScl_stable_r ]; reflexivity.
    Qed.

    Fact ill_plus_r1_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a ‚äï b‚üß).
    Proof. intros H; (etransitivity; [ apply H | ]); apply cl_monotone; apply lub_in_l. Qed.

    Fact ill_plus_r2_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶b‚üß) -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶a ‚äï b‚üß).
    Proof. intros H; (etransitivity; [ apply H | ]); apply cl_monotone; apply lub_in_r. Qed.

    Fact ill_zero_l_sound Œì Œî a : ‚ü¨ﬂ≠Œì ++ 0 :: Œî‚ü≠ ‚äÜ cl(‚ü¶a‚üß).
    Proof.
    apply list_form_presem_app_closed_1; auto.
    rewrite list_form_presem_cons; simpl.
    etransitivity; [ | apply zero_least ]; auto.
    etransitivity; [ | apply tensor_zero_distrib_r with (compose := PScompose) (A := ‚ü¨ﬂ≠Œì‚ü≠)]; auto.
    etransitivity; [ | apply cl_increase ].
    apply composes_monotone; try reflexivity.
    etransitivity; [ | apply tensor_zero_distrib_l with (compose := PScompose) (A := ‚ü¨ﬂ≠Œî‚ü≠)]; auto.
    etransitivity; [ | apply cl_increase ]; reflexivity.
    Qed.

    Fact ill_top_r_sound Œì : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ cl(‚ü¶‚üô‚üß).
    Proof. etransitivity; [ | apply cl_increase ]; apply top_greatest. Qed.

    Notation "l '‚ä¢' x" := (ill P l x) (at level 70, no associativity).

    Hint Resolve ill_ax_sound
                 ill_limp_l_sound ill_limp_r_sound ill_rimp_l_sound ill_rimp_r_sound
                 ill_gen_r_sound ill_gen_l_sound ill_neg_r_sound ill_neg_l_sound
                 ill_with_l1_sound ill_with_l2_sound ill_with_r_sound
                 ill_bang_l_sound ill_bang_r_sound ill_weak_sound ill_cntr_sound
                 ill_tensor_l_sound ill_tensor_r_sound
                 ill_plus_l_sound ill_plus_r1_sound ill_plus_r2_sound
                 ill_zero_l_sound ill_top_r_sound 
                 ill_unit_l_sound ill_unit_r_sound.

    Theorem ill_soundness Œì a : Œì ‚ä¢ a -> ‚ü¨ﬂ≠Œì‚ü≠  ‚äÜ cl(‚ü¶a‚üß).
    Proof.
    induction 1; try auto ; try now (simpl; auto).
    - revert p IHX; apply ill_perm_sound.
    - apply ill_co_oc_perm_sound with (lw := lw); auto.
    - apply ill_cut_sound with A; auto.
    - apply PMgax.
    Qed.

  End soundness.

End Phase_Spaces.

