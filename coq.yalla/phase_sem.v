(**************************************************************)
(*   Copyright Dominique Larchey-Wendling [*]                 *)
(*                                                            *)
(*                             [*] Affiliation LORIA -- CNRS  *)
(**************************************************************)
(*      This file is distributed under the terms of the       *)
(*         CeCILL v2 FREE SOFTWARE LICENSE AGREEMENT          *)
(**************************************************************)

Require Import Arith Omega List Permutation.
Require Import List_Type Permutation_Type_more genperm_Type.

Require Import rel_utils utils_tac.

Require Import ill_def.

Notation " x '~[' b ']' y " := (PEperm_Type b x y) (at level 70, format "x  ~[ b ]  y").

Notation "‚üô" := (itop).
Notation "‚üò" := (izero).
Notation ùùê := (ione).
Infix "&" := (iwith) (at level 50, only parsing).
Infix "Ôπ†" := (iwith) (at level 50).
Infix "‚äó" := (itens) (at level 50).
Infix "‚äï" := (iplus) (at level 50).
Infix "-o" := (ilmap) (at level 51, right associativity).
Notation "x o- y" := (ilpam y x) (at level 52, left associativity).
Notation "'!' x" := (ioc x) (at level 52).
Definition ill_lbang := map (fun x => !x).
Notation "'!l' x" := (ill_lbang x) (at level 60, only parsing).
Notation "‚Äº x" := (ill_lbang x) (at level 52).
Notation "¬£" := ivar.
Notation "‚àÖ" := nil (only parsing).





Set Implicit Arguments.

Section Relational_phase_semantics.

  (** We define a sound relational phase sematics for ILL 
      based on stable closures *)

  Variable M : Type.

  Implicit Types A B C : M -> Type.

  Variable cl : (M -> Type) -> (M -> Type).

  Hypothesis cl_increase   : forall A, A ‚äÜ cl A.
  Hypothesis cl_monotone   : forall A B, A ‚äÜ B -> cl A ‚äÜ cl B.
  Hypothesis cl_idempotent : forall A, cl (cl A) ‚äÜ cl A.

  Proposition cl_prop A B : A ‚äÜ cl B ‚â° cl A ‚äÜ cl B.
  Proof.
    split; intros H x Hx.
    apply cl_idempotent; revert Hx; apply cl_monotone; auto.
    apply H, cl_increase; auto.
  Qed.

  Definition cl_inc A B := fst (cl_prop A B).
  Definition inc_cl A B := snd (cl_prop A B). 

  Fact cl_eq1 A B : A ‚âÉ B -> cl A ‚âÉ cl B.
  Proof. intros []; split; apply cl_monotone; auto. Qed.

  Hint Resolve cl_inc cl_eq1.

  Notation closed := (fun x : M -> Type => cl x ‚äÜ x).

  Fact cl_closed A B : closed B -> A ‚äÜ B -> cl A ‚äÜ B.
  Proof.
    intros H1 H2.
    apply inc1_trans with (2 := H1), cl_inc, 
          inc1_trans with (1 := H2), cl_increase.
  Qed.

  Fact cap_closed A B : closed A -> closed B -> closed (A ‚à© B).
  Proof.
    intros HA HB x Hx; split; [ apply HA | apply HB ]; revert Hx; apply cl_monotone; red; tauto.
  Qed.

  Hint Resolve cap_closed.

  (* this is a relational/non-deterministic monoid *)

  Variable Compose : M -> M -> M -> Type.

  (* Composition lifted to predicates *)

  Inductive Composes (A B : M -> Type) : M -> Type :=
    In_composes : forall a b c, A a -> B b -> Compose a b c -> Composes A B c.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò *)

  Infix "‚àò" := Composes (at level 50, no associativity).

  Proposition composes_monotone A A' B B' : A ‚äÜ A' -> B ‚äÜ B' ->  A ‚àò B ‚äÜ A' ‚àò B'.
  Proof. intros ? ? _ [ ? ? ? ? ? H ]; apply In_composes with (3 := H); auto. Qed.

  Hint Resolve composes_monotone.

  (* Stability is the important axiom in phase semantics *)

  Definition cl_stability   := forall A B, cl A ‚àò cl B ‚äÜ cl (A ‚àò B).
  Definition cl_stability_l := (forall A B, cl A ‚àò    B ‚äÜ cl (A ‚àò B)).
  Definition cl_stability_r := forall A B,    A ‚àò cl B ‚äÜ cl (A ‚àò B).

  Proposition cl_stable_imp_stable_l : cl_stability -> cl_stability_l.
  Proof. 
    intros H ? ? x Hx.
    apply H; revert x Hx. 
    apply composes_monotone; auto.
  Qed.

  Proposition cl_stable_imp_stable_r : cl_stability -> cl_stability_r.
  Proof. 
    intros H ? ? x Hx.
    apply H; revert x Hx. 
    apply composes_monotone; auto.
  Qed.

  Proposition cl_stable_lr_imp_stable : cl_stability_l -> cl_stability_r -> cl_stability.
  Proof. 
    intros H1 H2 A B x Hx.
    apply cl_idempotent.
    generalize (H1 _ _ _ Hx).
    apply cl_monotone, H2.
  Qed.

  Hint Resolve cl_stable_imp_stable_l cl_stable_imp_stable_r cl_stable_lr_imp_stable.

  Variable e : M.

  Notation sg := (@eq _).

  Notation cl_neutrality_1  := (forall a, cl (sg e ‚àò sg a) a).
  Notation cl_neutrality_2  := (forall a, sg e ‚àò sg a ‚äÜ cl (sg a)).
  Notation cl_neutrality_3  := (forall a, cl (sg a ‚àò sg e) a).
  Notation cl_neutrality_4  := (forall a, sg a ‚àò sg e ‚äÜ cl (sg a)).
  Notation cl_commutativity := (forall a b, sg a ‚àò sg b ‚äÜ cl (sg b ‚àò sg a)).
  Notation cl_associativity_1 := (forall a b c, sg a ‚àò (sg b ‚àò sg c) ‚äÜ cl ((sg a ‚àò sg b) ‚àò sg c)).
  Notation cl_associativity_2 := (forall a b c, (sg a ‚àò sg b) ‚àò sg c ‚äÜ cl (sg a ‚àò (sg b ‚àò sg c))).

  Hypothesis cl_commute : cl_commutativity.

  Proposition composes_commute_1 A B : A ‚àò B ‚äÜ cl (B ‚àò A).
  Proof.
    intros _ [ a b c Ha Hb Hc ].
    apply cl_monotone with (sg b ‚àò sg a).
    apply composes_monotone; apply sg_inc1; auto.
    apply cl_commute.
    constructor 1 with (3 := Hc); auto.
  Qed.

  Hint Resolve composes_commute_1.

  Proposition composes_commute A B : cl (A‚àòB) ‚âÉ cl (B‚àòA).
  Proof. 
    split; intros x Hx; apply cl_idempotent; revert Hx; apply cl_monotone; auto. 
  Qed. 

  Section commute_stability.

    Proposition cl_stable_l_imp_stable_r : cl_stability_l -> cl_stability_r.
    Proof.
      intros Hl A B x Hx.
      apply cl_idempotent.
      apply cl_monotone with (cl B ‚àò A).
      apply inc1_trans with (2 := fst (composes_commute _ _)); auto.
      apply composes_commute_1; auto.
    Qed.

    Proposition cl_stable_r_imp_stable_l : cl_stability_r -> cl_stability_l.
    Proof.
      intros Hl A B.
      apply inc1_trans with (2 := fst (composes_commute _ _)); auto.
      apply inc1_trans with (1 := @composes_commute_1 _ _); auto.
    Qed.

    Hint Resolve cl_stable_l_imp_stable_r.

    Proposition cl_stable_l_imp_stable : cl_stability_l -> cl_stability.
    Proof. auto. Qed.

  End commute_stability. 

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò *)

  Hypothesis cl_stable_l : cl_stability_l.
  Hypothesis cl_stable_r : cl_stability_r.

  Proposition cl_stable : cl_stability.
  Proof. auto. Qed.

  Hint Resolve cl_stable.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ *)

  Proposition composes_congruent_l_1 A B C : A ‚äÜ cl B -> C ‚àò A ‚äÜ cl (C ‚àò B).
  Proof.
    intros ?.
    apply inc1_trans with (B := cl (C ‚àò cl B)); auto.
    apply inc_cl, cl_monotone, composes_monotone; auto.
  Qed.

  Hint Resolve composes_congruent_l_1.

  Proposition composes_congruent_l A B C : cl A ‚âÉ cl B -> cl (C ‚àò A) ‚âÉ cl (C ‚àò B).
  Proof.
    intros [H1 H2].
    generalize (inc_cl H1) (inc_cl H2); intros H3 H4.
    split; apply cl_inc;
    apply inc1_trans with (2 := @cl_stable_r _ _), composes_monotone; auto.
  Qed.

  Proposition composes_congruent_r_1 A B C : A ‚äÜ cl B -> A ‚àò C ‚äÜ cl (B ‚àò C).
  Proof.
    intros ?.
    apply inc1_trans with (B := cl (cl B ‚àò C)); auto.
    apply inc_cl, cl_monotone, composes_monotone; auto.
  Qed.

  Hint Resolve composes_congruent_r_1.

  Proposition composes_congruent_r A B C : cl A ‚âÉ cl B -> cl (A ‚àò C) ‚âÉ cl (B ‚àò C).
  Proof.
    intros [H1 H2].
    generalize (inc_cl H1) (inc_cl H2); intros H3 H4.
    split; apply cl_inc;
    apply inc1_trans with (2 := @cl_stable_l _ _), composes_monotone; auto.
  Qed.

  Hint Resolve composes_congruent_l composes_congruent_r. 

  Proposition composes_congruent A B C D : 
               cl A ‚âÉ cl B 
            -> cl C ‚âÉ cl D
            -> cl (A ‚àò C) ‚âÉ cl (B ‚àò D).
  Proof. intros; apply eq1_trans with (cl (B ‚àò C)); auto. Qed.

  Section commute_neutrality.

    Proposition cl_neutrality_1_imp_3 : cl_neutrality_1 -> cl_neutrality_3.
    Proof.
      intros H x; generalize (H x).
      apply composes_commute.
    Qed.

    Proposition cl_neutrality_2_imp_4 : cl_neutrality_2 -> cl_neutrality_4.
    Proof.
      intros H x y Hxy.
      specialize (H x).
      apply cl_idempotent.
      apply cl_monotone in H.
      apply H.
      revert Hxy; apply cl_commute.
    Qed.

  End commute_neutrality.

  Hypothesis cl_neutral_1 : cl_neutrality_1.
  Hypothesis cl_neutral_2 : cl_neutrality_2.
  Hypothesis cl_neutral_3 : cl_neutrality_3.
  Hypothesis cl_neutral_4 : cl_neutrality_4.

  Section commute_associativity.

    Proposition cl_associative_1_imp_2 : cl_associativity_1 -> cl_associativity_2.
    Proof.
      intros H1 a b c.
      apply inc1_trans with (2 := fst (composes_commute _ _)).
      apply inc1_trans with (cl ((sg c ‚àò sg b) ‚àò sg a)).
      + apply inc1_trans with (2 := cl_inc (H1 _ _ _)).
        apply inc1_trans with (2 := fst (composes_commute _ _)).
        apply inc_cl, composes_congruent; auto.
      + apply composes_congruent; auto.
    Qed.

  End commute_associativity.

  Hypothesis cl_associative_1 : cl_associativity_1.
  Hypothesis cl_associative_2 : cl_associativity_2.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ *)

  Definition Magicwand_l A B k := A ‚àò sg k ‚äÜ B.
  Infix "‚ä∏" := Magicwand_l (at level 51, right associativity).

  Proposition magicwand_l_spec A B C : B ‚àò A ‚äÜ C ‚â° A ‚äÜ B ‚ä∏ C.
  Proof.
    split; intros H x Hx.
    intros y Hy; apply H; revert Hy; apply composes_monotone; auto.
    apply sg_inc1; auto.
    destruct Hx as [ a b x Ha Hb Hx ].
    apply (H _ Hb).
    constructor 1 with a b; auto.
  Qed.

  Definition magicwand_l_adj_1 A B C := fst (magicwand_l_spec A B C).
  Definition magicwand_l_adj_2 A B C := snd (magicwand_l_spec A B C).

  Proposition magicwand_l_monotone A A' B B' : A ‚äÜ A' -> B ‚äÜ B' -> A' ‚ä∏ B ‚äÜ A ‚ä∏ B'.
  Proof.
    intros ? HB; apply magicwand_l_adj_1, inc1_trans with (2 := HB).
    intros _ [? ? ? Ha Hb Hc]; apply Hb, In_composes with (3 := Hc); auto.
  Qed.

  Hint Resolve magicwand_l_monotone.

  Proposition cl_magicwand_l_1 X Y : cl (X ‚ä∏ cl Y) ‚äÜ X ‚ä∏ cl Y.
  Proof. 
    apply magicwand_l_adj_1. 
    apply inc1_trans with (B := cl (X ‚àò (X ‚ä∏ cl Y))); auto.
    apply cl_inc; apply magicwand_l_spec; auto. 
  Qed.

  Proposition cl_magicwand_l_2 X Y : cl X ‚ä∏ Y ‚äÜ X ‚ä∏ Y.
  Proof. apply magicwand_l_monotone; auto. Qed.
 
  Hint Immediate cl_magicwand_l_1 cl_magicwand_l_2.

  Proposition cl_magicwand_l_3 X Y : X ‚ä∏ cl Y ‚äÜ cl X ‚ä∏ cl Y.
  Proof.
    intros c Hc y.
    apply inc1_trans with (B := cl (X ‚àò sg c)); auto.
  Qed.

  Hint Immediate cl_magicwand_l_3.

  Proposition closed_magicwand_l X Y : closed Y -> closed (X ‚ä∏ Y).
  Proof. 
    simpl; intros ?.
    apply inc1_trans with (B := cl (X ‚ä∏ cl Y)); auto.
    apply inc1_trans with (B := X ‚ä∏ cl Y); auto.
  Qed.

  Hint Resolve closed_magicwand_l.

  Proposition magicwand_l_eq_1 X Y : X ‚ä∏ cl Y ‚âÉ cl X ‚ä∏ cl Y.
  Proof. split; auto. Qed.

  Proposition magicwand_l_eq_2 X Y : cl (X ‚ä∏ cl Y) ‚âÉ X ‚ä∏ cl Y.
  Proof. split; auto. Qed.

  Proposition magicwand_l_eq_3 X Y : cl (X ‚ä∏ cl Y) ‚âÉ cl X ‚ä∏ cl Y.
  Proof.
    apply eq1_trans with (X ‚ä∏ cl Y); auto.
  Qed.

  Hint Resolve magicwand_l_eq_1 magicwand_l_eq_2 magicwand_l_eq_3.

  Definition Magicwand_r B A k := sg k ‚àò A ‚äÜ B.
  Infix "‚üú" := Magicwand_r (at level 52, left associativity).

  Proposition magicwand_r_spec A B C : A ‚àò B ‚äÜ C ‚â° A ‚äÜ C ‚üú B.
  Proof.
    split; intros H x Hx.
    intros y Hy; apply H; revert Hy; apply composes_monotone; auto.
    apply sg_inc1; auto.
    destruct Hx as [ a b x Ha Hb Hx ].
    apply (H _ Ha).
    constructor 1 with a b; auto.
  Qed.

  Definition magicwand_r_adj_1 A B C := fst (magicwand_r_spec A B C).
  Definition magicwand_r_adj_2 A B C := snd (magicwand_r_spec A B C).

  Proposition magicwand_r_monotone A A' B B' : A ‚äÜ A' -> B ‚äÜ B' -> B ‚üú A' ‚äÜ B' ‚üú A.
  Proof.
    intros ? HB; apply magicwand_r_adj_1, inc1_trans with (2 := HB).
    intros _ [? ? ? Ha Hb Hc]; apply Ha, In_composes with (3 := Hc); auto.
  Qed.

  Hint Resolve magicwand_r_monotone.

  Proposition cl_magicwand_r_1 X Y : cl (cl Y ‚üú X) ‚äÜ cl Y ‚üú cl X.
  Proof. 
    apply magicwand_r_adj_1. 
    apply inc1_trans with (B := cl ((cl Y ‚üú X) ‚àò X)); auto.
    apply cl_inc; apply magicwand_r_spec; auto. 
  Qed.

  Proposition cl_magicwand_r_2 X Y : Y ‚üú cl X ‚äÜ Y ‚üú X.
  Proof. apply magicwand_r_monotone; auto. Qed.

  Hint Immediate cl_magicwand_r_1 cl_magicwand_r_2.

  Proposition cl_magicwand_r_3 X Y : cl Y ‚üú X ‚äÜ cl Y ‚üú cl X.
  Proof.
    intros c Hc y.
    apply inc1_trans with (B := cl (sg c ‚àò X)); auto.
  Qed.

  Hint Immediate cl_magicwand_r_3.

  Proposition closed_magicwand_r X Y : closed Y -> closed (Y ‚üú X).
  Proof. 
    simpl; intros ?.
    apply inc1_trans with (B := cl (cl Y ‚üú X)); auto.
    apply inc1_trans with (1 := @cl_magicwand_r_1 _ _); auto.
  Qed.

  Hint Resolve closed_magicwand_r.

  Proposition magicwand_r_eq_1 X Y : cl Y ‚üú X ‚âÉ cl Y ‚üú cl X.
  Proof. split; auto. Qed.

  Proposition magicwand_r_eq_2 X Y : cl (cl Y ‚üú X) ‚âÉ cl Y ‚üú X.
  Proof. split; auto. Qed.

  Proposition magicwand_r_eq_3 X Y : cl (cl Y ‚üú X) ‚âÉ cl Y ‚üú cl X.
  Proof. apply eq1_trans with (cl Y ‚üú X); auto. Qed.

  Hint Resolve magicwand_r_eq_1 magicwand_r_eq_2 magicwand_r_eq_3.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ *)

  Proposition cl_equiv_2 X Y : cl (cl X ‚àò Y) ‚âÉ cl (X ‚àò Y).
  Proof. 
    split.
    apply cl_inc; auto.
    apply cl_monotone, composes_monotone; auto.
  Qed.

  Proposition cl_equiv_3 X Y : cl (X ‚àò cl Y) ‚âÉ cl (X ‚àò Y).
  Proof.
    split.
    apply cl_inc; auto.
    apply cl_monotone, composes_monotone; auto.
  Qed.

  Proposition cl_equiv_4 X Y : cl (cl X ‚àò cl Y) ‚âÉ cl (X ‚àò Y).
  Proof. 
    split.
    apply cl_inc; auto.
    apply cl_monotone, composes_monotone; auto.
  Qed.

  Hint Immediate cl_equiv_2 cl_equiv_3 cl_equiv_4.

  Proposition composes_associative_1 A B C : A ‚àò (B ‚àò C) ‚äÜ cl ((A ‚àò B) ‚àò C).
  Proof.
    intros _ [a _ k Ha [b c y Hb Hc Hy] Hk].
    generalize (@cl_associative_1 a b c k); intros H.
    spec all in H.
    apply In_composes with (3 := Hk); auto.
    apply In_composes with (3 := Hy); auto.
    revert H.
    apply cl_monotone.
    repeat apply composes_monotone; apply sg_inc1; auto.
  Qed.

  Hint Immediate composes_associative_1.

  Proposition composes_associative_2 A B C : (A ‚àò B) ‚àò C ‚äÜ cl (A ‚àò (B ‚àò C)).
  Proof.
    intros _ [_ c k [a b y Ha Hb Hy] Hc Hk].
    generalize (@cl_associative_2 a b c k); intros H.
    spec all in H.
    apply In_composes with (3 := Hk); auto.
    apply In_composes with (3 := Hy); auto.
    revert H.
    apply cl_monotone.
    repeat apply composes_monotone; apply sg_inc1; auto.
  Qed.

  Hint Immediate composes_associative_2.

  Proposition composes_associative A B C : cl (A ‚àò (B ‚àò C)) ‚âÉ cl ((A ‚àò B) ‚àò C).
  Proof. split; auto; apply cl_inc; auto. Qed.

  Hint Immediate composes_associative.


  Proposition composes_neutral_l_1 A : A ‚äÜ cl (sg e ‚àò A).
  Proof.
    intros a Ha.
    generalize (cl_neutral_1 a).
    apply cl_monotone, composes_monotone; auto.
    apply sg_inc1; auto.
  Qed.

  Proposition composes_neutral_l_2 A : sg e ‚àò A ‚äÜ cl A.
  Proof.
    intros _ [y a x [] Ha Hx].
    generalize (@cl_neutral_2 a x); intros H.
    spec all in H.
    constructor 1 with e a; auto.
    revert H; apply cl_monotone, sg_inc1; auto.
  Qed.

  Hint Resolve composes_neutral_l_1 composes_neutral_l_2.

  Proposition composes_neutral_l A : cl (sg e ‚àò A) ‚âÉ cl A.
  Proof. split; apply cl_inc; auto. Qed.

  Proposition composes_neutral_r_1 A : A ‚äÜ cl (A ‚àò sg e).
  Proof.
    intros a Ha.
    generalize (cl_neutral_3 a).
    apply cl_monotone, composes_monotone; auto.
    apply sg_inc1; auto.
  Qed.

  Proposition composes_neutral_r_2 A : A ‚àò sg e ‚äÜ cl A.
  Proof.
    intros _ [a y x Ha [] Hx].
    generalize (@cl_neutral_4 a x); intros H.
    spec all in H.
    constructor 1 with a e; auto.
    revert H; apply cl_monotone, sg_inc1; auto.
  Qed.

  Hint Resolve composes_neutral_r_1 composes_neutral_r_2.

  Proposition composes_neutral_r A : cl (A ‚àò sg e) ‚âÉ cl A.
  Proof. split; apply cl_inc; auto. Qed.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ ‚äõ *)

  Notation "x 'glb' y " := (x ‚à© y) (at level 50, no associativity).
  Notation "x 'lub' y" := (cl (x ‚à™ y)) (at level 50, no associativity).

  Proposition closed_glb A B : closed A -> closed B -> closed (A glb B).
  Proof. 
    simpl; intros HA HB x Hx; split; 
      [ apply HA | apply HB ]; revert x Hx; 
      apply cl_monotone; red; tauto. 
  Qed.

  Proposition lub_out A B C : closed C -> A ‚äÜ C -> B ‚äÜ C -> A lub B ‚äÜ C.
  Proof. 
    simpl.
    intros H1 H2 H3.
    apply inc1_trans with (2 := H1), cl_monotone.
    intros ? [ ]; auto.
  Qed.

  Proposition glb_in A B C : C ‚äÜ A -> C ‚äÜ B -> C ‚äÜ A glb B.
  Proof. simpl; split; auto. Qed. 

  Proposition closed_lub A B : closed (A lub B).        Proof. simpl; apply cl_idempotent. Qed.
  Proposition glb_out_l A B  : A glb B ‚äÜ A .            Proof. simpl; red; tauto. Qed.
  Proposition glb_out_r A B  : A glb B ‚äÜ B.             Proof. simpl; red; tauto. Qed.
  Proposition lub_in_l A B   : A ‚äÜ A lub B.             Proof. apply inc1_trans with (2 := cl_increase _); red; tauto. Qed.
  Proposition lub_in_r A B   : B ‚äÜ A lub B.             Proof. apply inc1_trans with (2 := cl_increase _); red; tauto. Qed.

  Proposition glb_comm A B : A glb B ‚âÉ B glb A.
  Proof. split; apply glb_in; red; tauto. Qed.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ ‚äõ *)

  Notation "x ‚äõ y " := (cl (x ‚àò y)) (at level 59).

  Proposition closed_times A B : closed (A‚äõB).
  Proof. simpl; apply cl_idempotent. Qed.

  Proposition times_monotone A A' B B' : A ‚äÜ A' -> B ‚äÜ B' -> A‚äõB ‚äÜ A'‚äõB'.
  Proof. simpl; intros ? ?; apply cl_monotone, composes_monotone; auto. Qed.

  Notation top := (fun _ : M => True).
  Notation bot := (cl (fun _ => False)).
  Notation unit := (cl (sg e)). 

  Proposition closed_top     : closed top.         Proof. simpl; intros; red; auto. Qed. 
  Proposition closed_bot     : closed bot.         Proof. simpl; apply cl_idempotent. Qed.
  Proposition closed_unit    : closed unit.        Proof. simpl; apply cl_idempotent. Qed.
  Proposition top_greatest A : A ‚äÜ top.            Proof. simpl; red; tauto. Qed.

  Hint Resolve closed_glb closed_top.


  Fact closed_mglb ll : Forall_Type closed ll -> closed (fold_right (fun x y => x ‚à© y) top ll). 
  Proof.
    induction 1; simpl; auto; red; auto.
  Qed.

  Hint Resolve closed_mglb.

  Proposition bot_least A : closed A -> bot ‚äÜ A.
  Proof. intro H; apply inc1_trans with (2 := H), cl_monotone; red; tauto. Qed.

  Proposition unit_neutral_l_1 A : closed A -> unit ‚äõ A ‚äÜ A.
  Proof. 
    intros H; apply inc1_trans with (2 := H).
    apply cl_inc.
    apply inc1_trans with (1 := @cl_stable_l _ _).
    apply cl_inc; auto.
  Qed.

  Proposition unit_neutral_l_2 A : A ‚äÜ unit ‚äõ A.
  Proof. 
    intros a Ha; simpl.
    generalize (composes_neutral_l_1 _ _ Ha).
    apply cl_monotone, composes_monotone; auto.
  Qed.

  Proposition unit_neutral_l A : closed A -> unit ‚äõ A ‚âÉ A.
  Proof. 
    intros H; split. 
    revert H; apply unit_neutral_l_1.
    apply unit_neutral_l_2.
  Qed.

  Proposition unit_neutral_r_1 A : closed A -> A ‚äõ unit ‚äÜ A.
  Proof. 
    intros H; apply inc1_trans with (2 := H).
    apply cl_inc.
    apply inc1_trans with (1 := @cl_stable_r _ _).
    apply cl_inc; auto.
  Qed.

  Proposition unit_neutral_r_2 A : A ‚äÜ A ‚äõ unit.
  Proof. 
    intros a Ha; simpl.
    generalize (composes_neutral_r_1 _ _ Ha).
    apply cl_monotone, composes_monotone; auto.
  Qed.

  Proposition unit_neutral_r A : closed A -> A ‚äõ unit ‚âÉ A.
  Proof. 
    intros H; split. 
    revert H; apply unit_neutral_r_1.
    apply unit_neutral_r_2.
  Qed.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ ‚äõ *)

  Hint Resolve unit_neutral_l unit_neutral_r. 

  Proposition times_commute_1 A B : A‚äõB ‚äÜ B‚äõA.
  Proof. simpl; apply cl_inc, composes_commute_1. Qed.

  Hint Resolve times_commute_1.
 
  Proposition times_commute A B : A‚äõB ‚âÉ B‚äõA.
  Proof. split; auto. Qed.

  Proposition times_associative A B C : (A‚äõB)‚äõC ‚âÉ A‚äõ(B‚äõC).
  Proof.
    apply eq1_sym, eq1_trans with (1 := cl_equiv_3 _ _ ).
    apply eq1_sym, eq1_trans with (1 := cl_equiv_2 _ _ ).
    apply eq1_sym, composes_associative.
  Qed.

  Proposition times_associative_1 A B C : (A‚äõB)‚äõC ‚äÜ A‚äõ(B‚äõC).     Proof. apply times_associative. Qed.
  Proposition times_associative_2 A B C : A‚äõ(B‚äõC) ‚äÜ (A‚äõB)‚äõC.     Proof. apply times_associative. Qed.

  Hint Resolve times_associative_1 times_associative_2.

  Proposition times_congruence A A' B B' : A ‚âÉ A' -> B ‚âÉ B' -> A‚äõB ‚âÉ A'‚äõB'.
  Proof. intros; apply composes_congruent; auto. Qed.

  (* ‚äÜ ‚âÉ ‚à© ‚à™ ‚àò ‚ä∏ ‚äõ *)
 
  Proposition adjunction_l_1 A B C : closed C -> B ‚äõ A ‚äÜ C -> A ‚äÜ B ‚ä∏ C.
  Proof. intros ? H; apply magicwand_l_adj_1, inc1_trans with (2 := H); auto. Qed.

  Proposition adjunction_l_2 A B C : closed C -> A ‚äÜ B ‚ä∏ C -> B ‚äõ A ‚äÜ C.
  Proof. intros H ?; apply inc1_trans with (2 := H), cl_monotone, magicwand_l_adj_2; auto. Qed.

  Hint Resolve times_congruence adjunction_l_1 (* adjunction_2 *).
 
  Proposition adjunction_l A B C : closed C -> (B ‚äõ A ‚äÜ C ‚â° A ‚äÜ B ‚ä∏ C).
  Proof.
    split; [ apply adjunction_l_1 | apply adjunction_l_2 ]; auto.
  Qed.

  Proposition adjunction_r_1 A B C : closed C -> A ‚äõ B ‚äÜ C -> A ‚äÜ C ‚üú B.
  Proof. intros ? H; apply magicwand_r_adj_1, inc1_trans with (2 := H); auto. Qed.

  Proposition adjunction_r_2 A B C : closed C -> A ‚äÜ C ‚üú B -> A ‚äõ B ‚äÜ C.
  Proof. intros H ?; apply inc1_trans with (2 := H), cl_monotone, magicwand_r_adj_2; auto. Qed.

  Hint Resolve adjunction_r_1 (* adjunction_2 *).
 
  Proposition adjunction_r A B C : closed C -> (A ‚äõ B ‚äÜ C ‚â° A ‚äÜ C ‚üú B).
  Proof.
    split; [ apply adjunction_r_1 | apply adjunction_r_2 ]; auto.
  Qed.

  Proposition times_bot_distrib_l A : bot ‚äõ A ‚äÜ bot.
  Proof.
    apply adjunction_r_2; auto.
    apply bot_least; auto.
  Qed.

  Proposition times_bot_distrib_r A : A ‚äõ bot ‚äÜ bot.
  Proof.
    apply adjunction_l_2; auto.
    apply bot_least; auto.
  Qed.

  Hint Immediate times_bot_distrib_l times_bot_distrib_r.

  Proposition times_lub_distrib_l A B C : (A lub B) ‚äõ C ‚äÜ (A ‚äõ C) lub (B ‚äõ C).
  Proof. 
    apply adjunction_r, lub_out; auto;
    apply adjunction_r; auto; intros ? ?; apply cl_increase; auto. 
  Qed.

  Proposition times_lub_distrib_r A B C : C ‚äõ (A lub B) ‚äÜ (C ‚äõ A) lub (C ‚äõ B).
  Proof.
    apply adjunction_l, lub_out; auto;
    apply adjunction_l; auto; intros ? ?; apply cl_increase; auto. 
  Qed.

  (* J := { x | x ‚àà unit /\ x ‚àà x ‚äõ x } with unit = cl e and x ‚äõ x = cl (x‚àòx) *)

  Let J x := (cl (sg e) x * (cl (sg x ‚àò sg x)) x)%type.

  Let In_J : forall x, cl (sg e) x -> (cl (sg x ‚àò sg x)) x -> J x.
  Proof. split; auto. Qed.

  Let J_inv x : J x -> unit x * cl (sg x ‚àò sg x) x.
  Proof. auto. Qed.

  Proposition J_inc_unit : J ‚äÜ unit.
  Proof. induction 1; trivial. Qed.

  Variable K : M -> Type.

  Notation sub_monoid_hyp_1 := ((cl K) e).
  Notation sub_monoid_hyp_2 := (K ‚àò K ‚äÜ K).
  Notation sub_J_hyp := (K ‚äÜ J).

  Hypothesis sub_monoid_1 : sub_monoid_hyp_1.
  Hypothesis sub_monoid_2 : sub_monoid_hyp_2.
  Hypothesis sub_J : sub_J_hyp.

  Proposition K_inc_unit : K ‚äÜ unit.
  Proof. apply inc1_trans with J; trivial; apply J_inc_unit. Qed.

  Proposition K_compose A B : (K ‚à© A) ‚àò (K ‚à© B) ‚äÜ K ‚à© (A ‚àò B).
  Proof.
    intros x Hx.
    induction Hx as [ a b c [ ] [ ] Hc ]; split.
    + apply sub_monoid_2; constructor 1 with a b; auto.
    + constructor 1 with a b; auto.
  Qed.

  Let bang A := cl (K‚à©A).

  Notation "‚ùó A" := (bang A) (at level 40, no associativity).

  Fact store_inc_unit A : ‚ùó A ‚äÜ unit.
  Proof. 
    apply inc1_trans with (cl K).
    + apply cl_monotone; red; tauto.
    + apply cl_inc, K_inc_unit.
  Qed.

  Hint Resolve store_inc_unit.

  Proposition closed_store A : closed (‚ùóA).
  Proof. simpl; apply cl_idempotent. Qed.

  Proposition store_dec A : closed A -> ‚ùóA ‚äÜ A.
  Proof.
    intros HA; simpl.
    apply inc1_trans with (cl A); trivial.
    apply cl_monotone.
    apply glb_out_r.
  Qed.

  Fact store_monotone A B : A ‚äÜ B -> ‚ùóA ‚äÜ ‚ùóB.
  Proof.
    intro; apply cl_monotone.
    intros ? []; split; auto.
  Qed.

  Hint Resolve store_monotone.

  Fact store_congruence A B : A ‚âÉ B -> ‚ùóA ‚âÉ ‚ùóB.
  Proof. intros []; split; auto. Qed.

  Proposition store_der A B : closed B -> ‚ùóA ‚äÜ B -> ‚ùóA ‚äÜ ‚ùóB.
  Proof.
    unfold bang.
    intros H1 H2; apply cl_monotone; intros x []; split; auto.
    apply H2, cl_increase; auto.
  Qed.

  Proposition store_unit_1 : unit ‚äÜ ‚ùótop.
  Proof.
    apply cl_inc.
    intros ? []; apply cl_monotone with K; auto; red; auto.
  Qed.

  Hint Resolve J_inc_unit.

  Proposition store_unit_2 : ‚ùótop ‚äÜ unit.
  Proof.
    apply cl_inc; trivial.
    apply inc1_trans with J; auto.
    intros ? []; auto.
  Qed.

  Hint Resolve store_unit_1 store_unit_2.

  Proposition store_unit : unit ‚âÉ ‚ùótop.
  Proof. split; auto. Qed.

  Proposition store_comp A B : closed A -> closed B -> ‚ùóA ‚äõ ‚ùóB ‚âÉ ‚ùó(A‚à©B).
  Proof.
    intros HA HB; split.
    + apply inc1_trans with (cl ((K glb A) ‚àò (K glb B))).
      * apply cl_inc; trivial; apply cl_stable.
      * apply cl_monotone.
        intros x [ a b c [ H1 H2 ] [ H3 H4 ] Hc ].
        assert (H5 : unit a). { apply K_inc_unit; auto. }
        assert (H6 : unit b). { apply K_inc_unit; auto. }
        split; [ | split ].
        - apply sub_monoid_2; constructor 1 with a b; auto.
        - apply unit_neutral_r_1; auto; apply cl_increase.
          constructor 1 with a b; auto.
        - apply unit_neutral_l_1; auto; apply cl_increase.
          constructor 1 with a b; auto.
    + apply cl_inc; trivial.
      intros x (H1 & H2 & H3).
      apply cl_monotone with (sg x ‚àò sg x).
      2: { apply sub_J in H1; destruct H1; trivial. }
      intros d [ a b ? ? Hab ]; subst a b; constructor 1 with x x; auto; 
        apply cl_increase; auto.
  Qed.

  Let ltimes := fold_right (fun x y => x ‚äõ y) unit.
  Let lcap := fold_right (fun x y => x‚à©y) top.

  Proposition ltimes_store ll : 
           Forall_Type closed ll
        -> ltimes (map bang ll)
         ‚âÉ ‚ùó(lcap ll).
  Proof.
    unfold ltimes, lcap.
    induction 1; simpl; auto.
    apply eq1_trans with (‚ùó x‚äõ ‚ùó(fold_right (fun x y => x ‚à© y) top l)).
    * apply times_congruence; auto.
    * apply store_comp; auto.
  Qed.

  Proposition store_compose_idem A : closed A -> ‚ùóA ‚äÜ ‚ùóA‚äõ‚ùóA.
  Proof.
    intros HA.
    apply inc1_trans with (‚ùó(A‚à©A)).
    + apply store_der. 
      * apply closed_glb; trivial.
      * apply inc1_trans with A.
        - apply store_dec; trivial.
        - red; tauto.
    + apply (snd (store_comp HA HA)).
  Qed.









(* Interpretation of Linear Logic *)

  Reserved Notation "'‚ü¶' A '‚üß'" (at level 49).
  Reserved Notation "'‚ü¨ﬂ≠' A '‚ü≠'" (at level 49).

  Variable (v : IAtom -> M -> Type) (Hv : forall x, cl (v x) ‚äÜ v x).

  Fixpoint Form_sem f :=
    match f with
      | ‚üò             => bot
      | ‚üô             => top
      | ùùê              => unit
      | ¬£ x    => v x
      | a -o b => ‚ü¶a‚üß ‚ä∏ ‚ü¶b‚üß
      | ineg a => ‚ü¶a‚üß ‚ä∏ v atN
      | b o- a => ‚ü¶b‚üß ‚üú ‚ü¶a‚üß
      | igen a => v atN ‚üú ‚ü¶a‚üß
      | a ‚äó b  => ‚ü¶a‚üß ‚äõ ‚ü¶b‚üß
      | a ‚äï b  => ‚ü¶a‚üß lub ‚ü¶b‚üß
      | a & b  => ‚ü¶a‚üß glb ‚ü¶b‚üß
      | !a     => ‚ùó‚ü¶a‚üß
    end
  where "‚ü¶ a ‚üß" := (Form_sem a).

  Fact closed_Form_sem f : cl (‚ü¶f‚üß) ‚äÜ ‚ü¶f‚üß.
  Proof. induction f; simpl; unfold bang; auto; red; auto. Qed.

  Definition list_Form_sem ll := fold_right (fun x y => x‚äõy) unit (map Form_sem ll).

  Notation "‚ü¨ﬂ≠  ll ‚ü≠" := (list_Form_sem ll).

  Fact list_Form_sem_nil : ‚ü¨ﬂ≠nil‚ü≠ = unit.
  Proof. auto. Qed.

  Fact list_Form_sem_cons f ll : ‚ü¨ﬂ≠f::ll‚ü≠  = ‚ü¶f‚üß ‚äõ ‚ü¨ﬂ≠ll‚ü≠.
  Proof. auto. Qed.

  Fact closed_list_Form_sem ll : cl (‚ü¨ﬂ≠ll‚ü≠) ‚äÜ ‚ü¨ﬂ≠ll‚ü≠.
  Proof. unfold list_Form_sem; induction ll; simpl; auto. Qed.
  
  Hint Resolve closed_Form_sem closed_list_Form_sem.
  
  Fact list_Form_sem_app ll mm : ‚ü¨ﬂ≠ll++mm‚ü≠ ‚âÉ ‚ü¨ﬂ≠ll‚ü≠ ‚äõ‚ü¨ﬂ≠mm‚ü≠.
  Proof.
    induction ll as [ | f ll IHll ]; simpl app; auto.
    + apply eq1_sym, unit_neutral_l; auto.
    + apply eq1_sym, eq1_trans with (1 := @times_associative _ _ _), eq1_sym.
      apply times_congruence; auto.
  Qed.

  Fact list_Form_sem_congr_l ll mm pp : ‚ü¨ﬂ≠mm‚ü≠ ‚âÉ ‚ü¨ﬂ≠pp‚ü≠  -> ‚ü¨ﬂ≠ll++mm‚ü≠ ‚âÉ ‚ü¨ﬂ≠ll++pp‚ü≠.
  Proof.
    intros H.
    do 2 apply eq1_trans with (1 := list_Form_sem_app _ _), eq1_sym.
    apply times_congruence; auto.
  Qed.

  Fact list_Form_sem_congr_r ll mm pp : ‚ü¨ﬂ≠mm‚ü≠ ‚âÉ ‚ü¨ﬂ≠pp‚ü≠  -> ‚ü¨ﬂ≠mm++ll‚ü≠ ‚âÉ ‚ü¨ﬂ≠pp++ll‚ü≠.
  Proof.
    intros H.
    do 2 apply eq1_trans with (1 := list_Form_sem_app _ _), eq1_sym.
    apply times_congruence; auto.
  Qed.

  Fact list_Form_sem_mono_l ll mm pp : ‚ü¨ﬂ≠mm‚ü≠ ‚äÜ ‚ü¨ﬂ≠pp‚ü≠  -> ‚ü¨ﬂ≠ll++mm‚ü≠ ‚äÜ ‚ü¨ﬂ≠ll++pp‚ü≠.
  Proof.
    intros H.
    apply inc1_trans with (‚ü¨ﬂ≠ll‚ü≠ ‚äõ‚ü¨ﬂ≠mm‚ü≠); [ apply list_Form_sem_app | ].
    apply inc1_trans with (‚ü¨ﬂ≠ll‚ü≠ ‚äõ‚ü¨ﬂ≠pp‚ü≠); [ | apply list_Form_sem_app ].
    apply times_monotone; auto.
  Qed.

  Fact list_Form_sem_mono_r ll mm pp : ‚ü¨ﬂ≠mm‚ü≠ ‚äÜ ‚ü¨ﬂ≠pp‚ü≠  -> ‚ü¨ﬂ≠mm++ll‚ü≠ ‚äÜ ‚ü¨ﬂ≠pp++ll‚ü≠.
  Proof.
    intros H.
    apply inc1_trans with (‚ü¨ﬂ≠mm‚ü≠ ‚äõ‚ü¨ﬂ≠ll‚ü≠); [ apply list_Form_sem_app | ].
    apply inc1_trans with (‚ü¨ﬂ≠pp‚ü≠ ‚äõ‚ü¨ﬂ≠ll‚ü≠); [ | apply list_Form_sem_app ].
    apply times_monotone; auto.
  Qed.

  Fact list_Form_sem_bang ll : ‚ü¨ﬂ≠‚Äºll‚ü≠ ‚âÉ ‚ùó (lcap (map Form_sem ll)).
  Proof.
    unfold list_Form_sem.

    assert (Forall_Type closed (map Form_sem ll)) as Hll.
    { induction ll as [ | y ll IHll ].
      + constructor.
      + constructor; auto. }
    apply eq1_trans with (2 := ltimes_store Hll).
    rewrite map_map.
    apply equal_eq1; clear Hll.
    induction ll as [ | a ll IHll ]; simpl; auto.
    rewrite IHll; auto.
  Qed.

  (* All the rules of the ILL sequent calculus (including cut) are closed
     under relational phase semantics, hence we deduce the following
     soundness theorem *)

  Section soundness.

    Context {P : ipfrag}.
    Hypothesis P_axfree : (projT1 (ipgax P) -> False).

    Notation "l '‚ä¢' x" := (ill P l x) (at level 70, no associativity).

    Fact ill_ax_sound a : ‚ü¨ﬂ≠a::nil‚ü≠  ‚äÜ ‚ü¶a‚üß.
    Proof. intro; apply unit_neutral_r; auto. Qed.

    Fact ill_cut_sound Œì œ¥ Œî a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œî++a::œ¥‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œî++Œì++œ¥‚ü≠ ‚äÜ ‚ü¶b‚üß.
    Proof.
      intros H1 H2.
      apply inc1_trans with (2 := H2).
      apply list_Form_sem_mono_l.
      apply inc1_trans with (1 := fst (list_Form_sem_app _ _)).
      rewrite list_Form_sem_cons; apply times_monotone; auto.
    Qed.

    (* Beware that ill_co_swap_sound assumes commutativity
        while ill_nc_swap_sound does not *)

    Fact ill_nc_swap_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++!a::!b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++!b::!a::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H x Hx; apply H; revert x Hx.
      apply list_Form_sem_congr_l.
      change (!a::!b::Œî) with (‚Äº(a::b::nil)++Œî).
      change (!b::!a::Œî) with (‚Äº(b::a::nil)++Œî).
      apply list_Form_sem_congr_r.
      do 2 apply eq1_trans with (1 := list_Form_sem_bang _), eq1_sym.
      apply store_congruence.
      simpl; split; red; tauto.
    Qed.

    Fact ill_co_swap_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++a::b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++b::a::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H x Hx; apply H; revert x Hx.
      apply list_Form_sem_congr_l.
      change (a::b::Œî) with ((a::b::nil)++Œî).
      change (b::a::Œî) with ((b::a::nil)++Œî).
      apply list_Form_sem_congr_r.
      repeat rewrite list_Form_sem_cons.
      repeat rewrite list_Form_sem_nil.
      apply eq1_trans with (1 := times_commute _ _).
      apply times_congruence.
      + apply unit_neutral_r; auto.
      + apply eq1_sym, unit_neutral_r; auto.
    Qed.

    Fact ill_perm_sound Œì Œî a : Œì ~[true] Œî -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œî‚ü≠ ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros H2; revert H2 a; subst; simpl.
      induction 1 as [ | a Ga De H1 IH1 | | ] ; intros c; auto.
      + repeat rewrite list_Form_sem_cons.
        intros H; apply adjunction_l_2; auto.
        apply IH1 with (a := a -o c); simpl. 
        apply adjunction_l_1; auto.
      + apply ill_co_swap_sound with (Œì := nil).
    Qed.

    Fact ill_limp_l_sound Œì œ¥ Œî a b c :  ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠œ¥++b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠œ¥++Œì++a -o b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H1 H2 x Hx; apply H2; revert x Hx.
      apply list_Form_sem_mono_l.
      change (b::Œî) with ((b::nil)++Œî).
      replace (Œì++a -o b::Œî) with ((Œì++a -o b::nil)++Œî).
      2: rewrite app_ass; auto.
      apply list_Form_sem_mono_r.
      apply inc1_trans with (1 := fst (list_Form_sem_app _ _)).
      apply inc1_trans with (‚ü¨ﬂ≠Œì‚ü≠ ‚äõ (‚ü¶ a ‚üß ‚ä∏ ‚ü¶ b ‚üß)).
      * apply times_congruence; auto.
        rewrite list_Form_sem_cons, list_Form_sem_nil. 
        apply eq1_sym, unit_neutral_r; auto.
      * apply inc1_trans with (‚ü¶b‚üß).
        apply adjunction_l; auto.
        rewrite list_Form_sem_cons, list_Form_sem_nil. 
        apply unit_neutral_r; auto.
    Qed.

    Fact ill_neg_l_sound Œì a :  ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œì++ineg a::nil‚ü≠ ‚äÜ ‚ü¶N‚üß.
    Proof.
      intros H.
      replace (‚ü¨ﬂ≠ Œì ++ ineg a :: nil ‚ü≠) with (‚ü¨ﬂ≠ nil ++ Œì ++ a -o N :: nil‚ü≠)
        by (unfold list_Form_sem; rewrite ? map_app; simpl; reflexivity).
      apply ill_limp_l_sound; auto.
      unfold list_Form_sem; simpl; apply unit_neutral_r_1; auto.
    Qed.

    Fact ill_rimp_l_sound Œì œ¥ Œî a b c :  ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠œ¥++b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠œ¥++b o- a::Œì++Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H1 H2 x Hx; apply H2; revert x Hx.
      apply list_Form_sem_mono_l.
      change (b::Œî) with ((b::nil)++Œî).
      change (b o- a::Œì++Œî) with ((b o- a::Œì)++Œî).
      apply list_Form_sem_mono_r.
      do 2 rewrite list_Form_sem_cons.
      rewrite list_Form_sem_nil.
      apply inc1_trans with (‚ü¶ b ‚üß).
      2: apply unit_neutral_r; auto.
      apply adjunction_r; auto.
      apply magicwand_r_monotone; auto.
    Qed.

    Fact ill_gen_l_sound Œì a :  ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠igen a::Œì‚ü≠ ‚äÜ ‚ü¶N‚üß.
    Proof.
      intros H.
      replace (‚ü¨ﬂ≠ igen a :: Œì ‚ü≠) with (‚ü¨ﬂ≠ nil ++ N o- a :: Œì ++ nil‚ü≠)
        by (unfold list_Form_sem; simpl; rewrite app_nil_r; reflexivity).
      apply ill_rimp_l_sound; auto.
      unfold list_Form_sem; simpl; apply unit_neutral_r_1; auto.
    Qed.

    Fact ill_limp_r_sound Œì a b : ‚ü¨ﬂ≠a::Œì‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß ‚ä∏ ‚ü¶b‚üß.
    Proof. intro; apply adjunction_l; auto. Qed.

    Fact ill_rimp_r_sound Œì a b : ‚ü¨ﬂ≠Œì++a::nil‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶b‚üß ‚üú ‚ü¶a‚üß.
    Proof.
      intros H.
      apply adjunction_r; auto.
      apply inc1_trans with (2 := H).
      apply inc1_trans with (2 := snd (list_Form_sem_app _ _)).
      apply times_monotone; auto.
      rewrite list_Form_sem_cons, list_Form_sem_nil.
      apply unit_neutral_r; auto.
    Qed.

    Fact ill_gen_r_sound Œì a : ‚ü¨ﬂ≠Œì++a::nil‚ü≠ ‚äÜ ‚ü¶N‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶igen a‚üß.
    Proof.
      simpl; change (v atN) with (‚ü¶ivar atN‚üß).
      apply ill_rimp_r_sound; auto.
    Qed.

    Fact ill_with_l1_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++a::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++a Ôπ† b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H).
      apply list_Form_sem_mono_l, times_monotone; auto.
      simpl; red; tauto.
    Qed.

    Fact ill_with_l2_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++a Ôπ† b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H).
      apply list_Form_sem_mono_l, times_monotone; auto.
      simpl; red; tauto.
    Qed.

    Fact ill_with_r_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶aÔπ†b‚üß.
    Proof. intros; simpl; red; auto. Qed.

    Fact ill_bang_l_sound Œì Œî a b : ‚ü¨ﬂ≠Œì++a::Œî‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì++!a::Œî‚ü≠ ‚äÜ ‚ü¶b‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H).
      apply list_Form_sem_mono_l, times_monotone; auto.
      apply store_dec; auto.
    Qed.

    Fact ill_bang_r_sound Œì a : ‚ü¨ﬂ≠‚ÄºŒì‚ü≠ ‚äÜ ‚ü¶ a ‚üß -> ‚ü¨ﬂ≠‚ÄºŒì‚ü≠ ‚äÜ ‚ùó‚ü¶a‚üß.
    Proof.
      intros H x Hx.
      apply list_Form_sem_bang in Hx; revert x Hx.
      apply store_der; auto.
      intros x Hx; apply H, list_Form_sem_bang; auto.
    Qed.

    Fact ill_weak_sound Œì Œî a b : ‚ü¨ﬂ≠Œì++Œî‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì++!a::Œî‚ü≠ ‚äÜ ‚ü¶b‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H), list_Form_sem_mono_l.
      apply inc1_trans with (unit ‚äõ ‚ü¨ﬂ≠Œî‚ü≠).
      * apply times_monotone; simpl; auto.
      * apply unit_neutral_l; auto.
    Qed.

    Fact ill_cntr_sound Œì Œî a b : ‚ü¨ﬂ≠Œì++!a::!a::Œî‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì++!a::Œî‚ü≠ ‚äÜ ‚ü¶b‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H), list_Form_sem_mono_l.
      change (!a::Œî) with (‚Äº(a::nil)++Œî) at 1.
      change (!a::!a::Œî) with (‚Äº(a::a::nil)++Œî).
      apply list_Form_sem_mono_r.
      apply inc1_trans with (1 := fst (list_Form_sem_bang _)).
      apply inc1_trans with (2 := snd (list_Form_sem_bang _)).
      apply store_monotone; simpl; red; tauto.
    Qed.

    Fact ill_times_l_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++a::b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++a‚äób::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H), list_Form_sem_mono_l.
      do 3 rewrite list_Form_sem_cons.
      apply times_associative.
    Qed.

    Fact ill_times_r_sound Œì Œî a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œî‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì++Œî‚ü≠ ‚äÜ ‚ü¶a‚üß‚äõ‚ü¶b‚üß.
    Proof. 
      intros ? ?.
      apply inc1_trans with (1 := fst (list_Form_sem_app _ _)).
      apply times_monotone; auto.
    Qed.

    Fact ill_plus_l_sound Œì Œî a b c : ‚ü¨ﬂ≠Œì++a::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++b::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß -> ‚ü¨ﬂ≠Œì++a‚äïb::Œî‚ü≠ ‚äÜ ‚ü¶c‚üß.
    Proof.
      intros H1 H2.
      apply inc1_trans with ((‚ü¨ﬂ≠Œì‚ü≠ ‚äõ(‚ü¶a‚üß‚äõ‚ü¨ﬂ≠Œî‚ü≠))lub (‚ü¨ﬂ≠Œì‚ü≠ ‚äõ(‚ü¶b‚üß‚äõ‚ü¨ﬂ≠Œî‚ü≠))).
      2: { apply lub_out; auto.
           * apply inc1_trans with (2 := H1).
             apply inc1_trans with (2 := snd (list_Form_sem_app _ _)).
             apply times_monotone; auto.
           * apply inc1_trans with (2 := H2).
             apply inc1_trans with (2 := snd (list_Form_sem_app _ _)).
             apply times_monotone; auto. }
      apply inc1_trans with (1 := fst (list_Form_sem_app _ _)).
      rewrite list_Form_sem_cons.
      apply inc1_trans with (2 := @times_lub_distrib_r _ _ _).
      apply times_monotone; auto.
      apply times_lub_distrib_l.
    Qed.

    Fact ill_plus_r1_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚äïb‚üß.
    Proof. intros ? ? ?; simpl; apply cl_increase; auto. Qed.

    Fact ill_plus_r2_sound Œì a b : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶b‚üß -> ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶a‚äïb‚üß.
    Proof. intros ? ? ?; simpl; apply cl_increase; auto. Qed.

    Fact ill_bot_l_sound Œì Œî a : ‚ü¨ﬂ≠Œì++‚üò::Œî‚ü≠ ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros x Hx.
      apply list_Form_sem_app in Hx.
      rewrite list_Form_sem_cons in Hx.
      apply bot_least; auto.
      apply times_bot_distrib_r with (A := ‚ü¨ﬂ≠Œì‚ü≠) .
      revert x Hx; apply times_monotone; auto.
    Qed.

    Fact ill_top_r_sound Œì : ‚ü¨ﬂ≠Œì‚ü≠ ‚äÜ ‚ü¶‚üô‚üß.
    Proof. simpl; red; auto. Qed.

    Fact ill_unit_l_sound Œì Œî a : ‚ü¨ﬂ≠Œì++Œî‚ü≠ ‚äÜ ‚ü¶a‚üß -> ‚ü¨ﬂ≠Œì++ùùê::Œî‚ü≠ ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros H.
      apply inc1_trans with (2 := H), list_Form_sem_mono_l.
      apply unit_neutral_l; auto.
    Qed.

    Fact ill_unit_r_sound : ‚ü¨ﬂ≠nil‚ü≠ ‚äÜ ‚ü¶ùùê‚üß.
    Proof. simpl; red; auto. Qed.

    Fact ill_co_oc_perm_sound l1 l2 lw lw' a : Permutation_Type lw lw' ->
             ‚ü¨ﬂ≠ l1 ++ map ioc lw ++ l2 ‚ü≠ ‚äÜ ‚ü¶ a ‚üß -> ‚ü¨ﬂ≠ l1 ++ map ioc lw' ++ l2 ‚ü≠ ‚äÜ ‚ü¶ a ‚üß.
    Proof.
      intros HP; revert l1 l2; induction HP; intros l1 l2; auto.
      + replace (l1 ++ map ioc (x :: l) ++ l2) with ((l1 ++ ioc x :: nil) ++ map ioc l ++ l2)
          by (simpl; rewrite <- ? app_assoc; rewrite <- app_comm_cons; reflexivity).
        replace (l1 ++ map ioc (x :: l') ++ l2) with ((l1 ++ ioc x :: nil) ++ map ioc l' ++ l2)
          by (simpl; rewrite <- ? app_assoc; rewrite <- app_comm_cons; reflexivity).
        auto.
      + apply ill_nc_swap_sound.
    Qed.

  End soundness.

    Context {P : ipfrag}.
    Hypothesis P_axfree : (projT1 (ipgax P) -> False).

    Notation "l '‚ä¢' x" := (ill P l x) (at level 70, no associativity).

  Hint Resolve   ill_ax_sound
                 ill_limp_l_sound ill_limp_r_sound ill_rimp_l_sound ill_rimp_r_sound
                 ill_gen_r_sound ill_gen_l_sound ill_neg_l_sound
                 ill_with_l1_sound ill_with_l2_sound ill_with_r_sound
                 ill_bang_l_sound ill_bang_r_sound ill_weak_sound ill_cntr_sound
                 ill_times_l_sound ill_times_r_sound
                 ill_plus_l_sound ill_plus_r1_sound ill_plus_r2_sound
                 ill_bot_l_sound ill_top_r_sound 
                 ill_unit_l_sound ill_unit_r_sound.


  Section ill_nc_soundness.

    Let ill_soundness_rec Œì a : ipperm P = false -> Œì ‚ä¢ a -> ‚ü¨ﬂ≠Œì‚ü≠  ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros E; induction 1; try auto; try now (simpl; auto).
      + rewrite E in p; simpl in p.
        subst; auto.
      + apply ill_co_oc_perm_sound with (lw := lw); auto.
      + apply ill_cut_sound with A; auto.
    Qed.

    Theorem ill_nc_soundness Œì a : ipperm P = false -> Œì ‚ä¢ a -> ‚ü¨ﬂ≠Œì‚ü≠  ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros; apply ill_soundness_rec; trivial.
    Qed.

  End ill_nc_soundness.

  Section ill_soundness.

    Fact ill_soundness_rec Œì a : ipperm P = true -> Œì ‚ä¢ a -> ‚ü¨ﬂ≠Œì‚ü≠  ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros E; induction 1; try auto; try now (simpl; auto).
      + rewrite E in p; simpl in p.
        apply ill_perm_sound with (1 := p) (Œì := l1); auto.
      + apply ill_co_oc_perm_sound with (lw := lw); auto.
      + apply ill_cut_sound with A; auto.
    Qed.

    Theorem ill_comm_soundness Œì a : ipperm P = true -> Œì ‚ä¢ a -> ‚ü¨ﬂ≠Œì‚ü≠  ‚äÜ ‚ü¶a‚üß.
    Proof.
      intros; apply ill_soundness_rec; trivial.
    Qed.

  End ill_soundness.

End Relational_phase_semantics.

(*
Local Infix "‚àò" := (@Composes _ _) (at level 50, no associativity).

Check ill_comm_soundness.
Check ill_nc_soundness.
*)






